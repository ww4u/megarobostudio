#ifndef _MRQ_ENUM_H_
#define _MRQ_ENUM_H_
enum MRQ_LINK_INTFC{
	MRQ_LINK_INTFC_NONE,
	MRQ_LINK_INTFC_CAN,
	MRQ_LINK_INTFC_RS232,
};
enum MRQ_LINK_DEVICEINFO{
	MRQ_LINK_DEVICEINFO_MRQ,
	MRQ_LINK_DEVICEINFO_MRV,
};
enum MRQ_LINK_DEVICEINFO_1{
	MRQ_LINK_DEVICEINFO_1_C23D,
	MRQ_LINK_DEVICEINFO_1_C23S,
	MRQ_LINK_DEVICEINFO_1_M2304,
	MRQ_LINK_DEVICEINFO_1_MV,
	MRQ_LINK_DEVICEINFO_1_M1710,
};
enum MRQ_SYSTEM_WORKMODE{
	MRQ_SYSTEM_WORKMODE_NORMAL,
	MRQ_SYSTEM_WORKMODE_NONE,
};
enum MRQ_SYSTEM_POWERON{
	MRQ_SYSTEM_POWERON_DEFAULT,
	MRQ_SYSTEM_POWERON_LAST,
};
enum MRQ_SYSTEM_ARMLEDPARA{
	MRQ_SYSTEM_ARMLEDPARA_BASE,
	MRQ_SYSTEM_ARMLEDPARA_BIGARM,
	MRQ_SYSTEM_ARMLEDPARA_SMALLARM,
	MRQ_SYSTEM_ARMLEDPARA_WRIST,
};
enum MRQ_RS232_BAUD{
	MRQ_RS232_BAUD__4800,
	MRQ_RS232_BAUD__7200,
	MRQ_RS232_BAUD__9600,
	MRQ_RS232_BAUD__14400,
	MRQ_RS232_BAUD__19200,
	MRQ_RS232_BAUD__38400,
	MRQ_RS232_BAUD__57600,
	MRQ_RS232_BAUD__115200,
	MRQ_RS232_BAUD__128000,
};
enum MRQ_RS232_WORDLEN{
	MRQ_RS232_WORDLEN__8,
	MRQ_RS232_WORDLEN__9,
};
enum MRQ_RS232_FLOWCTL{
	MRQ_RS232_FLOWCTL_NONE,
	MRQ_RS232_FLOWCTL_RTS,
	MRQ_RS232_FLOWCTL_CTS,
	MRQ_RS232_FLOWCTL_RTS_CTS,
};
enum MRQ_RS232_PARITY{
	MRQ_RS232_PARITY_NONE,
	MRQ_RS232_PARITY_EVEN,
	MRQ_RS232_PARITY_ODD,
};
enum MRQ_RS232_STOPBIT{
	MRQ_RS232_STOPBIT__1,
	MRQ_RS232_STOPBIT__0_5,
	MRQ_RS232_STOPBIT__2,
	MRQ_RS232_STOPBIT__1_5,
};
enum MRQ_CAN_TYPE{
	MRQ_CAN_TYPE_A,
	MRQ_CAN_TYPE_B,
};
enum MRQ_CAN_BAUD{
	MRQ_CAN_BAUD__1000,
	MRQ_CAN_BAUD__500,
	MRQ_CAN_BAUD__250,
	MRQ_CAN_BAUD__125,
	MRQ_CAN_BAUD__100,
	MRQ_CAN_BAUD__50,
	MRQ_CAN_BAUD__20,
	MRQ_CAN_BAUD__10,
};
enum MRQ_CAN_NETMANAGELED{
	MRQ_CAN_NETMANAGELED_OFF,
	MRQ_CAN_NETMANAGELED_ON,
};
enum MRQ_CAN_NETMANAGESTATE{
	MRQ_CAN_NETMANAGESTATE_IDLE,
	MRQ_CAN_NETMANAGESTATE_HASH,
	MRQ_CAN_NETMANAGESTATE_SIGNATURE,
};
enum MRQ_CAN_NETMANAGEID{
	MRQ_CAN_NETMANAGEID_NONE,
	MRQ_CAN_NETMANAGEID_SENDID,
	MRQ_CAN_NETMANAGEID_RECEIVEID,
};
enum MRQ_CLOCK_STARTTYPE{
	MRQ_CLOCK_STARTTYPE_RADIOID,
	MRQ_CLOCK_STARTTYPE_RECEIVEID,
	MRQ_CLOCK_STARTTYPE_GROUPID1,
	MRQ_CLOCK_STARTTYPE_GROUPID2,
};
enum MRQ_CLOCK_SYNCSTATE{
	MRQ_CLOCK_SYNCSTATE_END,
	MRQ_CLOCK_SYNCSTATE_START,
};
enum MRQ_MOTION_SWITCH{
	MRQ_MOTION_SWITCH_RESET,
	MRQ_MOTION_SWITCH_STOP,
	MRQ_MOTION_SWITCH_RUN,
	MRQ_MOTION_SWITCH_PREPARE,
	MRQ_MOTION_SWITCH_EMERGSTOP,
};
enum MRQ_MOTION_SWITCH_1{
	MRQ_MOTION_SWITCH_1_MAIN,
	MRQ_MOTION_SWITCH_1_SMALL,
	MRQ_MOTION_SWITCH_1_P1,
	MRQ_MOTION_SWITCH_1_P2,
	MRQ_MOTION_SWITCH_1_P3,
	MRQ_MOTION_SWITCH_1_P4,
	MRQ_MOTION_SWITCH_1_P5,
	MRQ_MOTION_SWITCH_1_P6,
	MRQ_MOTION_SWITCH_1_P7,
	MRQ_MOTION_SWITCH_1_P8,
};
enum MRQ_MOTION_STATE_2{
	MRQ_MOTION_STATE_2_POWERON,
	MRQ_MOTION_STATE_2_IDLE,
	MRQ_MOTION_STATE_2_CALCING,
	MRQ_MOTION_STATE_2_CALCEND,
	MRQ_MOTION_STATE_2_STANDBY,
	MRQ_MOTION_STATE_2_RUNNING,
	MRQ_MOTION_STATE_2_ERROR,
};
enum MRQ_MOTION_STATEREPORT{
	MRQ_MOTION_STATEREPORT_ACTIVE,
	MRQ_MOTION_STATEREPORT_QUERY,
};
enum MRQ_MOTION_STARTSOURCE{
	MRQ_MOTION_STARTSOURCE_SOFTWARE,
	MRQ_MOTION_STARTSOURCE_DIGITALIO,
	MRQ_MOTION_STARTSOURCE_CAN,
	MRQ_MOTION_STARTSOURCE_ALL,
};
enum MRQ_IDENTITY_GROUP{
	MRQ_IDENTITY_GROUP_GROUP1,
	MRQ_IDENTITY_GROUP_GROUP2,
};
enum MRQ_IDENTITY_LABEL{
	MRQ_IDENTITY_LABEL_SINANJU,
	MRQ_IDENTITY_LABEL_MEGATRON,
	MRQ_IDENTITY_LABEL_GOUF,
};
enum MRQ_IDENTITY_LABEL_1{
	MRQ_IDENTITY_LABEL_1_S1,
	MRQ_IDENTITY_LABEL_1_S2,
	MRQ_IDENTITY_LABEL_1_S3,
	MRQ_IDENTITY_LABEL_1_S4,
};
enum MRQ_MOTOR_STEPANGLE{
	MRQ_MOTOR_STEPANGLE__1_8,
	MRQ_MOTOR_STEPANGLE__0_9,
	MRQ_MOTOR_STEPANGLE__15,
	MRQ_MOTOR_STEPANGLE__7_5,
};
enum MRQ_MOTOR_TYPE{
	MRQ_MOTOR_TYPE_ROTARY,
	MRQ_MOTOR_TYPE_LINEAR,
};
enum MRQ_MOTOR_POSITIONUNIT{
	MRQ_MOTOR_POSITIONUNIT_ANGLE,
	MRQ_MOTOR_POSITIONUNIT_RADIAN,
	MRQ_MOTOR_POSITIONUNIT_MILLIMETER,
};
enum MRQ_MOTOR_SIZE{
	MRQ_MOTOR_SIZE__8,
	MRQ_MOTOR_SIZE__11,
	MRQ_MOTOR_SIZE__14,
	MRQ_MOTOR_SIZE__17,
	MRQ_MOTOR_SIZE__23,
	MRQ_MOTOR_SIZE__24,
};
enum MRQ_ENCODER_CHANNELNUM{
	MRQ_ENCODER_CHANNELNUM__1,
	MRQ_ENCODER_CHANNELNUM__3,
};
enum MRQ_ENCODER_TYPE{
	MRQ_ENCODER_TYPE_INCREMENTAL,
	MRQ_ENCODER_TYPE_ABSOLUTE,
};
enum MRQ_ENCODER_MULTIPLE{
	MRQ_ENCODER_MULTIPLE_SINGLE,
	MRQ_ENCODER_MULTIPLE_DOUBLE,
	MRQ_ENCODER_MULTIPLE_QUADRUPLE,
};
enum MRQ_ENCODER_STATE{
	MRQ_ENCODER_STATE_NONE,
	MRQ_ENCODER_STATE_OFF,
	MRQ_ENCODER_STATE_ON,
};
enum MRQ_MOTIONPLAN_PVTCONFIG_1{
	MRQ_MOTIONPLAN_PVTCONFIG_1_END,
	MRQ_MOTIONPLAN_PVTCONFIG_1_CLEAR,
};
enum MRQ_MOTIONPLAN_PRESETSTATE_1{
	MRQ_MOTIONPLAN_PRESETSTATE_1_OFF,
	MRQ_MOTIONPLAN_PRESETSTATE_1_ON,
	MRQ_MOTIONPLAN_PRESETSTATE_1_CALC,
};
enum MRQ_MOTIONPLAN_EXECUTEMODE_1{
	MRQ_MOTIONPLAN_EXECUTEMODE_1_CYCLE,
	MRQ_MOTIONPLAN_EXECUTEMODE_1_FIFO,
};
enum MRQ_MOTIONPLAN_PLANMODE_1{
	MRQ_MOTIONPLAN_PLANMODE_1_CUBICPOLY,
	MRQ_MOTIONPLAN_PLANMODE_1_TRAPEZOID,
	MRQ_MOTIONPLAN_PLANMODE_1_SCURVE,
};
enum MRQ_MOTIONPLAN_MOTIONMODE_1{
	MRQ_MOTIONPLAN_MOTIONMODE_1_PVT,
	MRQ_MOTIONPLAN_MOTIONMODE_1_LVT_CORRECT,
	MRQ_MOTIONPLAN_MOTIONMODE_1_LVT_NOCORRECT,
};
enum MRQ_MOTIONPLAN_MODIFYDUTY_1{
	MRQ_MOTIONPLAN_MODIFYDUTY_1__4,
	MRQ_MOTIONPLAN_MODIFYDUTY_1__8,
	MRQ_MOTIONPLAN_MODIFYDUTY_1__16,
	MRQ_MOTIONPLAN_MODIFYDUTY_1__32,
};
enum MRQ_MOTIONPLAN_ENDSTATE_1{
	MRQ_MOTIONPLAN_ENDSTATE_1_STOP,
	MRQ_MOTIONPLAN_ENDSTATE_1_HOLD,
};
enum MRQ_MOTIONPLAN_STOPMODE_1{
	MRQ_MOTIONPLAN_STOPMODE_1_IMMEDIATE,
	MRQ_MOTIONPLAN_STOPMODE_1_DISTANCE,
};
enum MRQ_MOTIONPLAN_OOSLINERESPONSE_1{
	MRQ_MOTIONPLAN_OOSLINERESPONSE_1_NONE,
	MRQ_MOTIONPLAN_OOSLINERESPONSE_1_ALARM,
	MRQ_MOTIONPLAN_OOSLINERESPONSE_1_STOP,
	MRQ_MOTIONPLAN_OOSLINERESPONSE_1_ALARM_STOP,
};
enum MRQ_REPORT_STATE{
	MRQ_REPORT_STATE_TORQUE,
	MRQ_REPORT_STATE_CYCLE,
	MRQ_REPORT_STATE_SGALL,
	MRQ_REPORT_STATE_SGSE,
	MRQ_REPORT_STATE_DIST,
	MRQ_REPORT_STATE_ABSENC,
};
enum MRQ_TRIGGER_MODE{
	MRQ_TRIGGER_MODE_PATTERN,
	MRQ_TRIGGER_MODE_LEVEL,
};
enum MRQ_TRIGGER_PATTERN{
	MRQ_TRIGGER_PATTERN_X,
	MRQ_TRIGGER_PATTERN_L,
	MRQ_TRIGGER_PATTERN_R,
	MRQ_TRIGGER_PATTERN_F,
	MRQ_TRIGGER_PATTERN_H,
};
enum MRQ_TRIGGER_PATTSMODE{
	MRQ_TRIGGER_PATTSMODE_CONTINUED,
	MRQ_TRIGGER_PATTSMODE_INTERVAL,
	MRQ_TRIGGER_PATTSMODE_SINGLE,
};
enum MRQ_TRIGGER_LEVELSTATE{
	MRQ_TRIGGER_LEVELSTATE_TRIG1,
	MRQ_TRIGGER_LEVELSTATE_TRIG2,
	MRQ_TRIGGER_LEVELSTATE_TRIG3,
	MRQ_TRIGGER_LEVELSTATE_TRIG4,
	MRQ_TRIGGER_LEVELSTATE_TRIG5,
};
enum MRQ_TRIGGER_LEVELTYPE_1{
	MRQ_TRIGGER_LEVELTYPE_1_RESERVE,
	MRQ_TRIGGER_LEVELTYPE_1_LOW,
	MRQ_TRIGGER_LEVELTYPE_1_RISE,
	MRQ_TRIGGER_LEVELTYPE_1_FALL,
	MRQ_TRIGGER_LEVELTYPE_1_HIGH,
};
enum MRQ_DRIVER_TYPE{
	MRQ_DRIVER_TYPE_D17,
	MRQ_DRIVER_TYPE_D23,
};
enum MRQ_DRIVER_STATEREG{
	MRQ_DRIVER_STATEREG_R0,
	MRQ_DRIVER_STATEREG_R1,
	MRQ_DRIVER_STATEREG_R2,
};
enum MRQ_DRIVER_MICROSTEPS{
	MRQ_DRIVER_MICROSTEPS__256,
	MRQ_DRIVER_MICROSTEPS__128,
	MRQ_DRIVER_MICROSTEPS__64,
	MRQ_DRIVER_MICROSTEPS__32,
	MRQ_DRIVER_MICROSTEPS__16,
	MRQ_DRIVER_MICROSTEPS__8,
	MRQ_DRIVER_MICROSTEPS__4,
	MRQ_DRIVER_MICROSTEPS__2,
	MRQ_DRIVER_MICROSTEPS__1,
};
enum MRQ_DRIVER_SGLIMIT{
	MRQ_DRIVER_SGLIMIT_UPLIMIT,
	MRQ_DRIVER_SGLIMIT_DOWNLIMIT,
};
enum MRQ_DRIVER_SGPARASET{
	MRQ_DRIVER_SGPARASET_SG0,
	MRQ_DRIVER_SGPARASET_SGT,
	MRQ_DRIVER_SGPARASET_SEMAX,
	MRQ_DRIVER_SGPARASET_SEMIN,
};
enum MRQ_DRIVER_MINICURRRATIO{
	MRQ_DRIVER_MINICURRRATIO__1_2,
	MRQ_DRIVER_MINICURRRATIO__1_4,
};
enum MRQ_DRIVER_REGCONFIG{
	MRQ_DRIVER_REGCONFIG_DRVCTRL,
	MRQ_DRIVER_REGCONFIG_CHOPCONF,
	MRQ_DRIVER_REGCONFIG_SMARTEN,
	MRQ_DRIVER_REGCONFIG_SGCSCONF,
	MRQ_DRIVER_REGCONFIG_DRVCONF,
};
enum MRQ_DIGITALOUTPUT_STATE{
	MRQ_DIGITALOUTPUT_STATE_DO1,
	MRQ_DIGITALOUTPUT_STATE_DO2,
	MRQ_DIGITALOUTPUT_STATE_DO3,
	MRQ_DIGITALOUTPUT_STATE_DO4,
};
enum MRQ_DIGITALOUTPUT_STATE_1{
	MRQ_DIGITALOUTPUT_STATE_1_DISABLE,
	MRQ_DIGITALOUTPUT_STATE_1_ENABLE,
};
enum MRQ_DIGITALOUTPUT_SIGNAL_1{
	MRQ_DIGITALOUTPUT_SIGNAL_1_LEVEL,
	MRQ_DIGITALOUTPUT_SIGNAL_1_NONE,
};
enum MRQ_DIGITALOUTPUT_POLARITY_1{
	MRQ_DIGITALOUTPUT_POLARITY_1_POSITIVE,
	MRQ_DIGITALOUTPUT_POLARITY_1_NEGATIVE,
};
enum MRQ_DIGITALOUTPUT_CONDITION_1{
	MRQ_DIGITALOUTPUT_CONDITION_1_AUTO,
	MRQ_DIGITALOUTPUT_CONDITION_1_NONE,
};
enum MRQ_ISOLATOROUTPUT_STATE{
	MRQ_ISOLATOROUTPUT_STATE_YO1,
	MRQ_ISOLATOROUTPUT_STATE_YO2,
};
enum MRQ_ISOLATOROUTPUT_RESPONSE_1{
	MRQ_ISOLATOROUTPUT_RESPONSE_1_TURNON,
	MRQ_ISOLATOROUTPUT_RESPONSE_1_CUTOFF,
};
enum MRQ_SENSORUART_BAUD{
	MRQ_SENSORUART_BAUD_UART1,
	MRQ_SENSORUART_BAUD_UART2,
};
enum MRQ_SENSORUART_BAUD_1{
	MRQ_SENSORUART_BAUD_1__4800,
	MRQ_SENSORUART_BAUD_1__7200,
	MRQ_SENSORUART_BAUD_1__9600,
	MRQ_SENSORUART_BAUD_1__14400,
	MRQ_SENSORUART_BAUD_1__19200,
	MRQ_SENSORUART_BAUD_1__38400,
	MRQ_SENSORUART_BAUD_1__57600,
	MRQ_SENSORUART_BAUD_1__115200,
	MRQ_SENSORUART_BAUD_1__128000,
	MRQ_SENSORUART_BAUD_1__2000000,
	MRQ_SENSORUART_BAUD_1__2500000,
};
enum MRQ_ABSENCALARM_ZEROPOSITION_1{
	MRQ_ABSENCALARM_ZEROPOSITION_1_NONE,
	MRQ_ABSENCALARM_ZEROPOSITION_1_EXIS,
};
enum MRQ_NEWDRIVER_TYPE{
	MRQ_NEWDRIVER_TYPE_RESERVE,
	MRQ_NEWDRIVER_TYPE_RESERVE1,
	MRQ_NEWDRIVER_TYPE_ST820,
};
enum MRQ_NEWDRIVER_MICROSTEPS{
	MRQ_NEWDRIVER_MICROSTEPS_RESERVE,
	MRQ_NEWDRIVER_MICROSTEPS_RESERVE1,
	MRQ_NEWDRIVER_MICROSTEPS_RESERVE2,
	MRQ_NEWDRIVER_MICROSTEPS__32,
	MRQ_NEWDRIVER_MICROSTEPS__16,
	MRQ_NEWDRIVER_MICROSTEPS__8,
	MRQ_NEWDRIVER_MICROSTEPS__4,
	MRQ_NEWDRIVER_MICROSTEPS__2,
	MRQ_NEWDRIVER_MICROSTEPS__1,
};

const char* MRQ_LINK_INTFC_toString( MRQ_LINK_INTFC eType );
const char* MRQ_LINK_DEVICEINFO_toString( MRQ_LINK_DEVICEINFO eType );
const char* MRQ_LINK_DEVICEINFO_1_toString( MRQ_LINK_DEVICEINFO_1 eType );
const char* MRQ_SYSTEM_WORKMODE_toString( MRQ_SYSTEM_WORKMODE eType );
const char* MRQ_SYSTEM_POWERON_toString( MRQ_SYSTEM_POWERON eType );
const char* MRQ_SYSTEM_ARMLEDPARA_toString( MRQ_SYSTEM_ARMLEDPARA eType );
const char* MRQ_RS232_BAUD_toString( MRQ_RS232_BAUD eType );
const char* MRQ_RS232_WORDLEN_toString( MRQ_RS232_WORDLEN eType );
const char* MRQ_RS232_FLOWCTL_toString( MRQ_RS232_FLOWCTL eType );
const char* MRQ_RS232_PARITY_toString( MRQ_RS232_PARITY eType );
const char* MRQ_RS232_STOPBIT_toString( MRQ_RS232_STOPBIT eType );
const char* MRQ_CAN_TYPE_toString( MRQ_CAN_TYPE eType );
const char* MRQ_CAN_BAUD_toString( MRQ_CAN_BAUD eType );
const char* MRQ_CAN_NETMANAGELED_toString( MRQ_CAN_NETMANAGELED eType );
const char* MRQ_CAN_NETMANAGESTATE_toString( MRQ_CAN_NETMANAGESTATE eType );
const char* MRQ_CAN_NETMANAGEID_toString( MRQ_CAN_NETMANAGEID eType );
const char* MRQ_CLOCK_STARTTYPE_toString( MRQ_CLOCK_STARTTYPE eType );
const char* MRQ_CLOCK_SYNCSTATE_toString( MRQ_CLOCK_SYNCSTATE eType );
const char* MRQ_MOTION_SWITCH_toString( MRQ_MOTION_SWITCH eType );
const char* MRQ_MOTION_SWITCH_1_toString( MRQ_MOTION_SWITCH_1 eType );
const char* MRQ_MOTION_STATE_2_toString( MRQ_MOTION_STATE_2 eType );
const char* MRQ_MOTION_STATEREPORT_toString( MRQ_MOTION_STATEREPORT eType );
const char* MRQ_MOTION_STARTSOURCE_toString( MRQ_MOTION_STARTSOURCE eType );
const char* MRQ_IDENTITY_GROUP_toString( MRQ_IDENTITY_GROUP eType );
const char* MRQ_IDENTITY_LABEL_toString( MRQ_IDENTITY_LABEL eType );
const char* MRQ_IDENTITY_LABEL_1_toString( MRQ_IDENTITY_LABEL_1 eType );
const char* MRQ_MOTOR_STEPANGLE_toString( MRQ_MOTOR_STEPANGLE eType );
const char* MRQ_MOTOR_TYPE_toString( MRQ_MOTOR_TYPE eType );
const char* MRQ_MOTOR_POSITIONUNIT_toString( MRQ_MOTOR_POSITIONUNIT eType );
const char* MRQ_MOTOR_SIZE_toString( MRQ_MOTOR_SIZE eType );
const char* MRQ_ENCODER_CHANNELNUM_toString( MRQ_ENCODER_CHANNELNUM eType );
const char* MRQ_ENCODER_TYPE_toString( MRQ_ENCODER_TYPE eType );
const char* MRQ_ENCODER_MULTIPLE_toString( MRQ_ENCODER_MULTIPLE eType );
const char* MRQ_ENCODER_STATE_toString( MRQ_ENCODER_STATE eType );
const char* MRQ_MOTIONPLAN_PVTCONFIG_1_toString( MRQ_MOTIONPLAN_PVTCONFIG_1 eType );
const char* MRQ_MOTIONPLAN_PRESETSTATE_1_toString( MRQ_MOTIONPLAN_PRESETSTATE_1 eType );
const char* MRQ_MOTIONPLAN_EXECUTEMODE_1_toString( MRQ_MOTIONPLAN_EXECUTEMODE_1 eType );
const char* MRQ_MOTIONPLAN_PLANMODE_1_toString( MRQ_MOTIONPLAN_PLANMODE_1 eType );
const char* MRQ_MOTIONPLAN_MOTIONMODE_1_toString( MRQ_MOTIONPLAN_MOTIONMODE_1 eType );
const char* MRQ_MOTIONPLAN_MODIFYDUTY_1_toString( MRQ_MOTIONPLAN_MODIFYDUTY_1 eType );
const char* MRQ_MOTIONPLAN_ENDSTATE_1_toString( MRQ_MOTIONPLAN_ENDSTATE_1 eType );
const char* MRQ_MOTIONPLAN_STOPMODE_1_toString( MRQ_MOTIONPLAN_STOPMODE_1 eType );
const char* MRQ_MOTIONPLAN_OOSLINERESPONSE_1_toString( MRQ_MOTIONPLAN_OOSLINERESPONSE_1 eType );
const char* MRQ_REPORT_STATE_toString( MRQ_REPORT_STATE eType );
const char* MRQ_TRIGGER_MODE_toString( MRQ_TRIGGER_MODE eType );
const char* MRQ_TRIGGER_PATTERN_toString( MRQ_TRIGGER_PATTERN eType );
const char* MRQ_TRIGGER_PATTSMODE_toString( MRQ_TRIGGER_PATTSMODE eType );
const char* MRQ_TRIGGER_LEVELSTATE_toString( MRQ_TRIGGER_LEVELSTATE eType );
const char* MRQ_TRIGGER_LEVELTYPE_1_toString( MRQ_TRIGGER_LEVELTYPE_1 eType );
const char* MRQ_DRIVER_TYPE_toString( MRQ_DRIVER_TYPE eType );
const char* MRQ_DRIVER_STATEREG_toString( MRQ_DRIVER_STATEREG eType );
const char* MRQ_DRIVER_MICROSTEPS_toString( MRQ_DRIVER_MICROSTEPS eType );
const char* MRQ_DRIVER_SGLIMIT_toString( MRQ_DRIVER_SGLIMIT eType );
const char* MRQ_DRIVER_SGPARASET_toString( MRQ_DRIVER_SGPARASET eType );
const char* MRQ_DRIVER_MINICURRRATIO_toString( MRQ_DRIVER_MINICURRRATIO eType );
const char* MRQ_DRIVER_REGCONFIG_toString( MRQ_DRIVER_REGCONFIG eType );
const char* MRQ_DIGITALOUTPUT_STATE_toString( MRQ_DIGITALOUTPUT_STATE eType );
const char* MRQ_DIGITALOUTPUT_STATE_1_toString( MRQ_DIGITALOUTPUT_STATE_1 eType );
const char* MRQ_DIGITALOUTPUT_SIGNAL_1_toString( MRQ_DIGITALOUTPUT_SIGNAL_1 eType );
const char* MRQ_DIGITALOUTPUT_POLARITY_1_toString( MRQ_DIGITALOUTPUT_POLARITY_1 eType );
const char* MRQ_DIGITALOUTPUT_CONDITION_1_toString( MRQ_DIGITALOUTPUT_CONDITION_1 eType );
const char* MRQ_ISOLATOROUTPUT_STATE_toString( MRQ_ISOLATOROUTPUT_STATE eType );
const char* MRQ_ISOLATOROUTPUT_RESPONSE_1_toString( MRQ_ISOLATOROUTPUT_RESPONSE_1 eType );
const char* MRQ_SENSORUART_BAUD_toString( MRQ_SENSORUART_BAUD eType );
const char* MRQ_SENSORUART_BAUD_1_toString( MRQ_SENSORUART_BAUD_1 eType );
const char* MRQ_ABSENCALARM_ZEROPOSITION_1_toString( MRQ_ABSENCALARM_ZEROPOSITION_1 eType );
const char* MRQ_NEWDRIVER_TYPE_toString( MRQ_NEWDRIVER_TYPE eType );
const char* MRQ_NEWDRIVER_MICROSTEPS_toString( MRQ_NEWDRIVER_MICROSTEPS eType );

int MRQ_LINK_INTFC_toValue( const char *pStr, MRQ_LINK_INTFC *pEVal );
int MRQ_LINK_DEVICEINFO_toValue( const char *pStr, MRQ_LINK_DEVICEINFO *pEVal );
int MRQ_LINK_DEVICEINFO_1_toValue( const char *pStr, MRQ_LINK_DEVICEINFO_1 *pEVal );
int MRQ_SYSTEM_WORKMODE_toValue( const char *pStr, MRQ_SYSTEM_WORKMODE *pEVal );
int MRQ_SYSTEM_POWERON_toValue( const char *pStr, MRQ_SYSTEM_POWERON *pEVal );
int MRQ_SYSTEM_ARMLEDPARA_toValue( const char *pStr, MRQ_SYSTEM_ARMLEDPARA *pEVal );
int MRQ_RS232_BAUD_toValue( const char *pStr, MRQ_RS232_BAUD *pEVal );
int MRQ_RS232_WORDLEN_toValue( const char *pStr, MRQ_RS232_WORDLEN *pEVal );
int MRQ_RS232_FLOWCTL_toValue( const char *pStr, MRQ_RS232_FLOWCTL *pEVal );
int MRQ_RS232_PARITY_toValue( const char *pStr, MRQ_RS232_PARITY *pEVal );
int MRQ_RS232_STOPBIT_toValue( const char *pStr, MRQ_RS232_STOPBIT *pEVal );
int MRQ_CAN_TYPE_toValue( const char *pStr, MRQ_CAN_TYPE *pEVal );
int MRQ_CAN_BAUD_toValue( const char *pStr, MRQ_CAN_BAUD *pEVal );
int MRQ_CAN_NETMANAGELED_toValue( const char *pStr, MRQ_CAN_NETMANAGELED *pEVal );
int MRQ_CAN_NETMANAGESTATE_toValue( const char *pStr, MRQ_CAN_NETMANAGESTATE *pEVal );
int MRQ_CAN_NETMANAGEID_toValue( const char *pStr, MRQ_CAN_NETMANAGEID *pEVal );
int MRQ_CLOCK_STARTTYPE_toValue( const char *pStr, MRQ_CLOCK_STARTTYPE *pEVal );
int MRQ_CLOCK_SYNCSTATE_toValue( const char *pStr, MRQ_CLOCK_SYNCSTATE *pEVal );
int MRQ_MOTION_SWITCH_toValue( const char *pStr, MRQ_MOTION_SWITCH *pEVal );
int MRQ_MOTION_SWITCH_1_toValue( const char *pStr, MRQ_MOTION_SWITCH_1 *pEVal );
int MRQ_MOTION_STATE_2_toValue( const char *pStr, MRQ_MOTION_STATE_2 *pEVal );
int MRQ_MOTION_STATEREPORT_toValue( const char *pStr, MRQ_MOTION_STATEREPORT *pEVal );
int MRQ_MOTION_STARTSOURCE_toValue( const char *pStr, MRQ_MOTION_STARTSOURCE *pEVal );
int MRQ_IDENTITY_GROUP_toValue( const char *pStr, MRQ_IDENTITY_GROUP *pEVal );
int MRQ_IDENTITY_LABEL_toValue( const char *pStr, MRQ_IDENTITY_LABEL *pEVal );
int MRQ_IDENTITY_LABEL_1_toValue( const char *pStr, MRQ_IDENTITY_LABEL_1 *pEVal );
int MRQ_MOTOR_STEPANGLE_toValue( const char *pStr, MRQ_MOTOR_STEPANGLE *pEVal );
int MRQ_MOTOR_TYPE_toValue( const char *pStr, MRQ_MOTOR_TYPE *pEVal );
int MRQ_MOTOR_POSITIONUNIT_toValue( const char *pStr, MRQ_MOTOR_POSITIONUNIT *pEVal );
int MRQ_MOTOR_SIZE_toValue( const char *pStr, MRQ_MOTOR_SIZE *pEVal );
int MRQ_ENCODER_CHANNELNUM_toValue( const char *pStr, MRQ_ENCODER_CHANNELNUM *pEVal );
int MRQ_ENCODER_TYPE_toValue( const char *pStr, MRQ_ENCODER_TYPE *pEVal );
int MRQ_ENCODER_MULTIPLE_toValue( const char *pStr, MRQ_ENCODER_MULTIPLE *pEVal );
int MRQ_ENCODER_STATE_toValue( const char *pStr, MRQ_ENCODER_STATE *pEVal );
int MRQ_MOTIONPLAN_PVTCONFIG_1_toValue( const char *pStr, MRQ_MOTIONPLAN_PVTCONFIG_1 *pEVal );
int MRQ_MOTIONPLAN_PRESETSTATE_1_toValue( const char *pStr, MRQ_MOTIONPLAN_PRESETSTATE_1 *pEVal );
int MRQ_MOTIONPLAN_EXECUTEMODE_1_toValue( const char *pStr, MRQ_MOTIONPLAN_EXECUTEMODE_1 *pEVal );
int MRQ_MOTIONPLAN_PLANMODE_1_toValue( const char *pStr, MRQ_MOTIONPLAN_PLANMODE_1 *pEVal );
int MRQ_MOTIONPLAN_MOTIONMODE_1_toValue( const char *pStr, MRQ_MOTIONPLAN_MOTIONMODE_1 *pEVal );
int MRQ_MOTIONPLAN_MODIFYDUTY_1_toValue( const char *pStr, MRQ_MOTIONPLAN_MODIFYDUTY_1 *pEVal );
int MRQ_MOTIONPLAN_ENDSTATE_1_toValue( const char *pStr, MRQ_MOTIONPLAN_ENDSTATE_1 *pEVal );
int MRQ_MOTIONPLAN_STOPMODE_1_toValue( const char *pStr, MRQ_MOTIONPLAN_STOPMODE_1 *pEVal );
int MRQ_MOTIONPLAN_OOSLINERESPONSE_1_toValue( const char *pStr, MRQ_MOTIONPLAN_OOSLINERESPONSE_1 *pEVal );
int MRQ_REPORT_STATE_toValue( const char *pStr, MRQ_REPORT_STATE *pEVal );
int MRQ_TRIGGER_MODE_toValue( const char *pStr, MRQ_TRIGGER_MODE *pEVal );
int MRQ_TRIGGER_PATTERN_toValue( const char *pStr, MRQ_TRIGGER_PATTERN *pEVal );
int MRQ_TRIGGER_PATTSMODE_toValue( const char *pStr, MRQ_TRIGGER_PATTSMODE *pEVal );
int MRQ_TRIGGER_LEVELSTATE_toValue( const char *pStr, MRQ_TRIGGER_LEVELSTATE *pEVal );
int MRQ_TRIGGER_LEVELTYPE_1_toValue( const char *pStr, MRQ_TRIGGER_LEVELTYPE_1 *pEVal );
int MRQ_DRIVER_TYPE_toValue( const char *pStr, MRQ_DRIVER_TYPE *pEVal );
int MRQ_DRIVER_STATEREG_toValue( const char *pStr, MRQ_DRIVER_STATEREG *pEVal );
int MRQ_DRIVER_MICROSTEPS_toValue( const char *pStr, MRQ_DRIVER_MICROSTEPS *pEVal );
int MRQ_DRIVER_SGLIMIT_toValue( const char *pStr, MRQ_DRIVER_SGLIMIT *pEVal );
int MRQ_DRIVER_SGPARASET_toValue( const char *pStr, MRQ_DRIVER_SGPARASET *pEVal );
int MRQ_DRIVER_MINICURRRATIO_toValue( const char *pStr, MRQ_DRIVER_MINICURRRATIO *pEVal );
int MRQ_DRIVER_REGCONFIG_toValue( const char *pStr, MRQ_DRIVER_REGCONFIG *pEVal );
int MRQ_DIGITALOUTPUT_STATE_toValue( const char *pStr, MRQ_DIGITALOUTPUT_STATE *pEVal );
int MRQ_DIGITALOUTPUT_STATE_1_toValue( const char *pStr, MRQ_DIGITALOUTPUT_STATE_1 *pEVal );
int MRQ_DIGITALOUTPUT_SIGNAL_1_toValue( const char *pStr, MRQ_DIGITALOUTPUT_SIGNAL_1 *pEVal );
int MRQ_DIGITALOUTPUT_POLARITY_1_toValue( const char *pStr, MRQ_DIGITALOUTPUT_POLARITY_1 *pEVal );
int MRQ_DIGITALOUTPUT_CONDITION_1_toValue( const char *pStr, MRQ_DIGITALOUTPUT_CONDITION_1 *pEVal );
int MRQ_ISOLATOROUTPUT_STATE_toValue( const char *pStr, MRQ_ISOLATOROUTPUT_STATE *pEVal );
int MRQ_ISOLATOROUTPUT_RESPONSE_1_toValue( const char *pStr, MRQ_ISOLATOROUTPUT_RESPONSE_1 *pEVal );
int MRQ_SENSORUART_BAUD_toValue( const char *pStr, MRQ_SENSORUART_BAUD *pEVal );
int MRQ_SENSORUART_BAUD_1_toValue( const char *pStr, MRQ_SENSORUART_BAUD_1 *pEVal );
int MRQ_ABSENCALARM_ZEROPOSITION_1_toValue( const char *pStr, MRQ_ABSENCALARM_ZEROPOSITION_1 *pEVal );
int MRQ_NEWDRIVER_TYPE_toValue( const char *pStr, MRQ_NEWDRIVER_TYPE *pEVal );
int MRQ_NEWDRIVER_MICROSTEPS_toValue( const char *pStr, MRQ_NEWDRIVER_MICROSTEPS *pEVal );

enum cmd_MRQ
{

	MRQ_mc_LINK = 1,
		MRQ_sc_LINK_INTFC = 0,
		MRQ_sc_LINK_INTFC_Q = 1,
		MRQ_sc_LINK_DEVICEINFO_Q = 2,

	MRQ_mc_SYSTEM = 2,
		MRQ_sc_SYSTEM_WORKMODE = 0,
		MRQ_sc_SYSTEM_WORKMODE_Q = 1,
		MRQ_sc_SYSTEM_POWERON = 2,
		MRQ_sc_SYSTEM_POWERON_Q = 3,
		MRQ_sc_SYSTEM_SN_Q = 4,
		MRQ_sc_SYSTEM_TYPE_Q = 5,
		MRQ_sc_SYSTEM_SOFTVER_Q = 6,
		MRQ_sc_SYSTEM_FPGAVER_Q = 7,
		MRQ_sc_SYSTEM_HARDVER_Q = 8,
		MRQ_sc_SYSTEM_BOOTVER_Q = 9,
		MRQ_sc_SYSTEM_EVENTCODE_Q = 10,
		MRQ_sc_SYSTEM_DIOSTATE_Q = 11,
		MRQ_sc_SYSTEM_FANPARA = 12,
		MRQ_sc_SYSTEM_FANPARA_Q = 13,
		MRQ_sc_SYSTEM_ARMLEDPARA = 14,
		MRQ_sc_SYSTEM_ARMLEDPARA_Q = 15,

	MRQ_mc_RS232 = 3,
		MRQ_sc_RS232_BAUD = 0,
		MRQ_sc_RS232_BAUD_Q = 1,
		MRQ_sc_RS232_WORDLEN = 2,
		MRQ_sc_RS232_WORDLEN_Q = 3,
		MRQ_sc_RS232_FLOWCTL = 4,
		MRQ_sc_RS232_FLOWCTL_Q = 5,
		MRQ_sc_RS232_PARITY = 6,
		MRQ_sc_RS232_PARITY_Q = 7,
		MRQ_sc_RS232_STOPBIT = 8,
		MRQ_sc_RS232_STOPBIT_Q = 9,
		MRQ_sc_RS232_APPLYPARA = 10,

	MRQ_mc_CAN = 4,
		MRQ_sc_CAN_TYPE = 0,
		MRQ_sc_CAN_TYPE_Q = 1,
		MRQ_sc_CAN_BAUD = 2,
		MRQ_sc_CAN_BAUD_Q = 3,
		MRQ_sc_CAN_GROUP = 4,
		MRQ_sc_CAN_GROUP_Q = 5,
		MRQ_sc_CAN_SENDID = 6,
		MRQ_sc_CAN_SENDID_Q = 7,
		MRQ_sc_CAN_RECEIVEID = 8,
		MRQ_sc_CAN_RECEIVEID_Q = 9,
		MRQ_sc_CAN_GROUPID1 = 10,
		MRQ_sc_CAN_GROUPID1_Q = 11,
		MRQ_sc_CAN_GROUPID2 = 12,
		MRQ_sc_CAN_GROUPID2_Q = 13,
		MRQ_sc_CAN_BROADCASTID = 14,
		MRQ_sc_CAN_BROADCASTID_Q = 15,
		MRQ_sc_CAN_APPLYPARA = 16,
		MRQ_sc_CAN_NETMANAGELED = 17,
		MRQ_sc_CAN_NETMANAGESTATE = 18,
		MRQ_sc_CAN_NETMANAGESTATE_Q = 19,
		MRQ_sc_CAN_NETMANAGEID = 20,
		MRQ_sc_CAN_NETMANAGEID_Q = 21,
		MRQ_sc_CAN_NETMANAGEHASH = 22,
		MRQ_sc_CAN_NETMANAGEHASH_Q = 23,

	MRQ_mc_CLOCK = 5,
		MRQ_sc_CLOCK_FREQUENCY = 0,
		MRQ_sc_CLOCK_FREQUENCY_Q = 1,
		MRQ_sc_CLOCK_SYNCREGISTER = 2,
		MRQ_sc_CLOCK_SYNCREGISTER_Q = 3,
		MRQ_sc_CLOCK_STARTTYPE = 4,
		MRQ_sc_CLOCK_STARTTYPE_Q = 5,
		MRQ_sc_CLOCK_SYNCSTATE = 6,
		MRQ_sc_CLOCK_SYNCSTATE_Q = 7,
		MRQ_sc_CLOCK_COUNT_Q = 8,

	MRQ_mc_MOTION = 21,
		MRQ_sc_MOTION_SWITCH = 0,
		MRQ_sc_MOTION_STATE_Q = 1,
		MRQ_sc_MOTION_STATEREPORT = 2,
		MRQ_sc_MOTION_STATEREPORT_Q = 3,
		MRQ_sc_MOTION_STARTSOURCE = 4,
		MRQ_sc_MOTION_STARTSOURCE_Q = 5,
		MRQ_sc_MOTION_STARTTYPE = 6,
		MRQ_sc_MOTION_STARTTYPE_Q = 7,
		MRQ_sc_MOTION_MAXSPEED = 8,
		MRQ_sc_MOTION_MAXSPEED_Q = 9,
		MRQ_sc_MOTION_MINSPEED = 10,
		MRQ_sc_MOTION_MINSPEED_Q = 11,
		MRQ_sc_MOTION_MAXPOSITION = 12,
		MRQ_sc_MOTION_MAXPOSITION_Q = 13,
		MRQ_sc_MOTION_MINPOSITION = 14,
		MRQ_sc_MOTION_MINPOSITION_Q = 15,
		MRQ_sc_MOTION_MAXTORQUE = 16,
		MRQ_sc_MOTION_MAXTORQUE_Q = 17,
		MRQ_sc_MOTION_MINTORQUE = 18,
		MRQ_sc_MOTION_MINTORQUE_Q = 19,
		MRQ_sc_MOTION_MAXACCELERATION = 20,
		MRQ_sc_MOTION_MAXACCELERATION_Q = 21,
		MRQ_sc_MOTION_MINACCELERATION = 22,
		MRQ_sc_MOTION_MINACCELERATION_Q = 23,
		MRQ_sc_MOTION_ORIGIN = 24,
		MRQ_sc_MOTION_ORIGIN_Q = 25,
		MRQ_sc_MOTION_GOORIGIN = 26,
		MRQ_sc_MOTION_OFFSETSTATE = 27,
		MRQ_sc_MOTION_OFFSETSTATE_Q = 28,
		MRQ_sc_MOTION_OFFSET = 29,
		MRQ_sc_MOTION_COUNTCIRCLE_Q = 30,
		MRQ_sc_MOTION_ABCOUNT_Q = 31,
		MRQ_sc_MOTION_REVMOTION = 32,
		MRQ_sc_MOTION_REVMOTION_Q = 33,
		MRQ_sc_MOTION_ABCOUNTRESET = 34,

	MRQ_mc_IDENTITY = 22,
		MRQ_sc_IDENTITY_GROUP = 0,
		MRQ_sc_IDENTITY_GROUP_Q = 1,
		MRQ_sc_IDENTITY_DISTDEVICE = 2,
		MRQ_sc_IDENTITY_DISTDEVICE_Q = 3,
		MRQ_sc_IDENTITY_LABEL = 4,
		MRQ_sc_IDENTITY_LABEL_Q = 5,

	MRQ_mc_MOTOR = 51,
		MRQ_sc_MOTOR_STEPANGLE = 0,
		MRQ_sc_MOTOR_STEPANGLE_Q = 1,
		MRQ_sc_MOTOR_TYPE = 2,
		MRQ_sc_MOTOR_TYPE_Q = 3,
		MRQ_sc_MOTOR_POSITIONUNIT = 4,
		MRQ_sc_MOTOR_POSITIONUNIT_Q = 5,
		MRQ_sc_MOTOR_GEARRATIONUM = 6,
		MRQ_sc_MOTOR_GEARRATIONUM_Q = 7,
		MRQ_sc_MOTOR_GEARRATIODEN = 8,
		MRQ_sc_MOTOR_GEARRATIODEN_Q = 9,
		MRQ_sc_MOTOR_LEAD = 10,
		MRQ_sc_MOTOR_LEAD_Q = 11,
		MRQ_sc_MOTOR_PEAKSPEED = 12,
		MRQ_sc_MOTOR_PEAKSPEED_Q = 13,
		MRQ_sc_MOTOR_PEAKACCELERATION = 14,
		MRQ_sc_MOTOR_PEAKACCELERATION_Q = 15,
		MRQ_sc_MOTOR_SIZE = 16,
		MRQ_sc_MOTOR_SIZE_Q = 17,
		MRQ_sc_MOTOR_VOLTAGE = 18,
		MRQ_sc_MOTOR_VOLTAGE_Q = 19,
		MRQ_sc_MOTOR_CURRENT = 20,
		MRQ_sc_MOTOR_CURRENT_Q = 21,
		MRQ_sc_MOTOR_BACKLASH = 22,
		MRQ_sc_MOTOR_BACKLASH_Q = 23,
		MRQ_sc_MOTOR_BACKLASHTEST = 24,
		MRQ_sc_MOTOR_BACKLASHTEST_Q = 25,

	MRQ_mc_ENCODER = 52,
		MRQ_sc_ENCODER_LINENUM = 0,
		MRQ_sc_ENCODER_LINENUM_Q = 1,
		MRQ_sc_ENCODER_CHANNELNUM = 2,
		MRQ_sc_ENCODER_CHANNELNUM_Q = 3,
		MRQ_sc_ENCODER_TYPE = 4,
		MRQ_sc_ENCODER_TYPE_Q = 5,
		MRQ_sc_ENCODER_MULTIPLE = 6,
		MRQ_sc_ENCODER_MULTIPLE_Q = 7,
		MRQ_sc_ENCODER_STATE = 8,
		MRQ_sc_ENCODER_STATE_Q = 9,
		MRQ_sc_ENCODER_FEEDBACKRATIO = 10,
		MRQ_sc_ENCODER_FEEDBACKRATIO_Q = 11,

	MRQ_mc_MOTIONPLAN = 53,
		MRQ_sc_MOTIONPLAN_PVTCONFIG = 0,
		MRQ_sc_MOTIONPLAN_PVTCONFIG_Q = 1,
		MRQ_sc_MOTIONPLAN_PRESETSTATE = 2,
		MRQ_sc_MOTIONPLAN_PRESETSTATE_Q = 3,
		MRQ_sc_MOTIONPLAN_EXECUTEMODE = 4,
		MRQ_sc_MOTIONPLAN_EXECUTEMODE_Q = 5,
		MRQ_sc_MOTIONPLAN_PLANMODE = 6,
		MRQ_sc_MOTIONPLAN_PLANMODE_Q = 7,
		MRQ_sc_MOTIONPLAN_MOTIONMODE = 8,
		MRQ_sc_MOTIONPLAN_MOTIONMODE_Q = 9,
		MRQ_sc_MOTIONPLAN_MODIFYDUTY = 10,
		MRQ_sc_MOTIONPLAN_MODIFYDUTY_Q = 11,
		MRQ_sc_MOTIONPLAN_REMAINPOINT_Q = 12,
		MRQ_sc_MOTIONPLAN_CYCLENUM = 13,
		MRQ_sc_MOTIONPLAN_CYCLENUM_Q = 14,
		MRQ_sc_MOTIONPLAN_WARNPOINT = 15,
		MRQ_sc_MOTIONPLAN_WARNPOINT_Q = 16,
		MRQ_sc_MOTIONPLAN_ENDSTATE = 17,
		MRQ_sc_MOTIONPLAN_ENDSTATE_Q = 18,
		MRQ_sc_MOTIONPLAN_BUFFERSIZE_Q = 19,
		MRQ_sc_MOTIONPLAN_ACCSCALE = 20,
		MRQ_sc_MOTIONPLAN_ACCSCALE_Q = 21,
		MRQ_sc_MOTIONPLAN_DECSCALE = 22,
		MRQ_sc_MOTIONPLAN_DECSCALE_Q = 23,
		MRQ_sc_MOTIONPLAN_STOPMODE = 24,
		MRQ_sc_MOTIONPLAN_STOPMODE_Q = 25,
		MRQ_sc_MOTIONPLAN_STOPDISTANCE = 26,
		MRQ_sc_MOTIONPLAN_STOPDISTANCE_Q = 27,
		MRQ_sc_MOTIONPLAN_STOPTIME = 28,
		MRQ_sc_MOTIONPLAN_STOPTIME_Q = 29,
		MRQ_sc_MOTIONPLAN_OOSLINESTATE = 30,
		MRQ_sc_MOTIONPLAN_OOSLINESTATE_Q = 31,
		MRQ_sc_MOTIONPLAN_OOSLINEOUTNUM = 32,
		MRQ_sc_MOTIONPLAN_OOSLINEOUTNUM_Q = 33,
		MRQ_sc_MOTIONPLAN_OOSLINERESPONSE = 34,
		MRQ_sc_MOTIONPLAN_OOSLINERESPONSE_Q = 35,
		MRQ_sc_MOTIONPLAN_OOSTOTALSTATE = 36,
		MRQ_sc_MOTIONPLAN_OOSTOTALSTATE_Q = 37,
		MRQ_sc_MOTIONPLAN_OOSTOTALOUTNUM = 38,
		MRQ_sc_MOTIONPLAN_OOSTOTALOUTNUM_Q = 39,
		MRQ_sc_MOTIONPLAN_OOSTOTALRESPONSE = 40,
		MRQ_sc_MOTIONPLAN_OOSTOTALRESPONSE_Q = 41,

	MRQ_mc_POSITION = 54,

	MRQ_mc_POSITION_Q = 55,

	MRQ_mc_VELOCITY = 56,

	MRQ_mc_VELOCITY_Q = 57,

	MRQ_mc_TIME = 58,

	MRQ_mc_TIME_Q = 59,

	MRQ_mc_REPORT = 60,
		MRQ_sc_REPORT_STATE = 0,
		MRQ_sc_REPORT_STATE_Q = 1,
		MRQ_sc_REPORT_PERIOD = 2,
		MRQ_sc_REPORT_PERIOD_Q = 3,
		MRQ_sc_REPORT_DATA_Q = 4,

	MRQ_mc_TRIGGER = 61,
		MRQ_sc_TRIGGER_MODE = 0,
		MRQ_sc_TRIGGER_MODE_Q = 1,
		MRQ_sc_TRIGGER_PATTSTATE = 2,
		MRQ_sc_TRIGGER_PATTSTATE_Q = 3,
		MRQ_sc_TRIGGER_PATTERN = 4,
		MRQ_sc_TRIGGER_PATTERN_Q = 5,
		MRQ_sc_TRIGGER_PATTRESP = 6,
		MRQ_sc_TRIGGER_PATTRESP_Q = 7,
		MRQ_sc_TRIGGER_PATTSMODE = 8,
		MRQ_sc_TRIGGER_PATTSMODE_Q = 9,
		MRQ_sc_TRIGGER_PATTSPERIOD = 10,
		MRQ_sc_TRIGGER_PATTSPERIOD_Q = 11,
		MRQ_sc_TRIGGER_LEVELSTATE = 12,
		MRQ_sc_TRIGGER_LEVELSTATE_Q = 13,
		MRQ_sc_TRIGGER_LEVELTYPE = 14,
		MRQ_sc_TRIGGER_LEVELTYPE_Q = 15,
		MRQ_sc_TRIGGER_LEVELRESP = 16,
		MRQ_sc_TRIGGER_LEVELRESP_Q = 17,
		MRQ_sc_TRIGGER_LEVELSMODE = 18,
		MRQ_sc_TRIGGER_LEVELSMODE_Q = 19,
		MRQ_sc_TRIGGER_LEVELSPERIOD = 20,
		MRQ_sc_TRIGGER_LEVELSPERIOD_Q = 21,

	MRQ_mc_DRIVER = 62,
		MRQ_sc_DRIVER_TYPE_Q = 0,
		MRQ_sc_DRIVER_STATEREG_Q = 1,
		MRQ_sc_DRIVER_CURRENT = 2,
		MRQ_sc_DRIVER_CURRENT_Q = 3,
		MRQ_sc_DRIVER_MICROSTEPS = 4,
		MRQ_sc_DRIVER_MICROSTEPS_Q = 5,
		MRQ_sc_DRIVER_STATE = 6,
		MRQ_sc_DRIVER_STATE_Q = 7,
		MRQ_sc_DRIVER_SGLIMIT = 8,
		MRQ_sc_DRIVER_SGLIMIT_Q = 9,
		MRQ_sc_DRIVER_SGPARASET = 10,
		MRQ_sc_DRIVER_SGPARASET_Q = 11,
		MRQ_sc_DRIVER_IDLECURRENT = 12,
		MRQ_sc_DRIVER_IDLECURRENT_Q = 13,
		MRQ_sc_DRIVER_SWITCHTIME = 14,
		MRQ_sc_DRIVER_SWITCHTIME_Q = 15,
		MRQ_sc_DRIVER_MINICURRRATIO = 16,
		MRQ_sc_DRIVER_MINICURRRATIO_Q = 17,
		MRQ_sc_DRIVER_REGCONFIG = 18,
		MRQ_sc_DRIVER_REGCONFIG_Q = 19,

	MRQ_mc_DIGITALOUTPUT = 63,
		MRQ_sc_DIGITALOUTPUT_STATE = 0,
		MRQ_sc_DIGITALOUTPUT_STATE_Q = 1,
		MRQ_sc_DIGITALOUTPUT_SIGNAL = 2,
		MRQ_sc_DIGITALOUTPUT_SIGNAL_Q = 3,
		MRQ_sc_DIGITALOUTPUT_POLARITY = 4,
		MRQ_sc_DIGITALOUTPUT_POLARITY_Q = 5,
		MRQ_sc_DIGITALOUTPUT_SOURCE = 6,
		MRQ_sc_DIGITALOUTPUT_SOURCE_Q = 7,
		MRQ_sc_DIGITALOUTPUT_CONDITION = 8,
		MRQ_sc_DIGITALOUTPUT_CONDITION_Q = 9,
		MRQ_sc_DIGITALOUTPUT_PERIOD = 10,
		MRQ_sc_DIGITALOUTPUT_PERIOD_Q = 11,
		MRQ_sc_DIGITALOUTPUT_DUTY = 12,
		MRQ_sc_DIGITALOUTPUT_DUTY_Q = 13,

	MRQ_mc_ISOLATOROUTPUT = 64,
		MRQ_sc_ISOLATOROUTPUT_STATE = 0,
		MRQ_sc_ISOLATOROUTPUT_STATE_Q = 1,
		MRQ_sc_ISOLATOROUTPUT_SOURCE = 2,
		MRQ_sc_ISOLATOROUTPUT_SOURCE_Q = 3,
		MRQ_sc_ISOLATOROUTPUT_CONDITION = 4,
		MRQ_sc_ISOLATOROUTPUT_CONDITION_Q = 5,
		MRQ_sc_ISOLATOROUTPUT_RESPONSE = 6,
		MRQ_sc_ISOLATOROUTPUT_RESPONSE_Q = 7,

	MRQ_mc_SENSORUART = 65,
		MRQ_sc_SENSORUART_BAUD = 0,
		MRQ_sc_SENSORUART_BAUD_Q = 1,
		MRQ_sc_SENSORUART_WORDLEN = 2,
		MRQ_sc_SENSORUART_WORDLEN_Q = 3,
		MRQ_sc_SENSORUART_FLOWCTL = 4,
		MRQ_sc_SENSORUART_FLOWCTL_Q = 5,
		MRQ_sc_SENSORUART_PARITY = 6,
		MRQ_sc_SENSORUART_PARITY_Q = 7,
		MRQ_sc_SENSORUART_STOPBIT = 8,
		MRQ_sc_SENSORUART_STOPBIT_Q = 9,
		MRQ_sc_SENSORUART_APPLYPARA = 10,
		MRQ_sc_SENSORUART_STATE = 11,
		MRQ_sc_SENSORUART_STATE_Q = 12,
		MRQ_sc_SENSORUART_SOF = 13,
		MRQ_sc_SENSORUART_SOF_Q = 14,
		MRQ_sc_SENSORUART_FRAMELEN = 15,
		MRQ_sc_SENSORUART_FRAMELEN_Q = 16,
		MRQ_sc_SENSORUART_RECEIVENUM = 17,
		MRQ_sc_SENSORUART_RECEIVENUM_Q = 18,
		MRQ_sc_SENSORUART_SWITCHTIME = 19,
		MRQ_sc_SENSORUART_SWITCHTIME_Q = 20,
		MRQ_sc_SENSORUART_DATA_Q = 21,

	MRQ_mc_ISOLATORIN = 72,
		MRQ_sc_ISOLATORIN_STATE = 0,
		MRQ_sc_ISOLATORIN_STATE_Q = 1,
		MRQ_sc_ISOLATORIN_TYPE = 2,
		MRQ_sc_ISOLATORIN_TYPE_Q = 3,
		MRQ_sc_ISOLATORIN_RESPONSE = 4,
		MRQ_sc_ISOLATORIN_RESPONSE_Q = 5,
		MRQ_sc_ISOLATORIN_RESPCHAN = 6,
		MRQ_sc_ISOLATORIN_RESPCHAN_Q = 7,
		MRQ_sc_ISOLATORIN_SMODE = 8,
		MRQ_sc_ISOLATORIN_SMODE_Q = 9,
		MRQ_sc_ISOLATORIN_SPERIOD = 10,
		MRQ_sc_ISOLATORIN_SPERIOD_Q = 11,

	MRQ_mc_ABSENCALARM = 73,
		MRQ_sc_ABSENCALARM_STATE = 0,
		MRQ_sc_ABSENCALARM_STATE_Q = 1,
		MRQ_sc_ABSENCALARM_UPLIMIT = 2,
		MRQ_sc_ABSENCALARM_UPLIMIT_Q = 3,
		MRQ_sc_ABSENCALARM_DOWNLIMIT = 4,
		MRQ_sc_ABSENCALARM_DOWNLIMIT_Q = 5,
		MRQ_sc_ABSENCALARM_ZEROVALUE = 6,
		MRQ_sc_ABSENCALARM_ZEROVALUE_Q = 7,
		MRQ_sc_ABSENCALARM_ZEROPOSITION = 8,
		MRQ_sc_ABSENCALARM_ZEROPOSITION_Q = 9,
		MRQ_sc_ABSENCALARM_RESPONSE = 10,
		MRQ_sc_ABSENCALARM_RESPONSE_Q = 11,

	MRQ_mc_DISTANCEALARM = 74,
		MRQ_sc_DISTANCEALARM_STATE = 0,
		MRQ_sc_DISTANCEALARM_STATE_Q = 1,
		MRQ_sc_DISTANCEALARM_ALARM1DIST = 2,
		MRQ_sc_DISTANCEALARM_ALARM1DIST_Q = 3,
		MRQ_sc_DISTANCEALARM_ALARM2DIST = 4,
		MRQ_sc_DISTANCEALARM_ALARM2DIST_Q = 5,
		MRQ_sc_DISTANCEALARM_ALARM3DIST = 6,
		MRQ_sc_DISTANCEALARM_ALARM3DIST_Q = 7,

	MRQ_mc_OTP = 70,
		MRQ_sc_OTP_STATE = 0,
		MRQ_sc_OTP_STATE_Q = 1,
		MRQ_sc_OTP_THRESHOLD = 2,
		MRQ_sc_OTP_THRESHOLD_Q = 3,
		MRQ_sc_OTP_RESPONSE = 4,
		MRQ_sc_OTP_RESPONSE_Q = 5,
		MRQ_sc_OTP_PERIOD = 6,
		MRQ_sc_OTP_PERIOD_Q = 7,
		MRQ_sc_OTP_DATA_Q = 8,

	MRQ_mc_ANALOGIN = 71,
		MRQ_sc_ANALOGIN_STATE = 0,
		MRQ_sc_ANALOGIN_STATE_Q = 1,
		MRQ_sc_ANALOGIN_THRESHOLDH = 2,
		MRQ_sc_ANALOGIN_THRESHOLDH_Q = 3,
		MRQ_sc_ANALOGIN_THRESHOLDL = 4,
		MRQ_sc_ANALOGIN_THRESHOLDL_Q = 5,
		MRQ_sc_ANALOGIN_RESPONSEH = 6,
		MRQ_sc_ANALOGIN_RESPONSEH_Q = 7,
		MRQ_sc_ANALOGIN_RESPONSEL = 8,
		MRQ_sc_ANALOGIN_RESPONSEL_Q = 9,

	MRQ_mc_NEWDRIVER = 75,
		MRQ_sc_NEWDRIVER_TYPE_Q = 0,
		MRQ_sc_NEWDRIVER_CURRENT = 1,
		MRQ_sc_NEWDRIVER_CURRENT_Q = 2,
		MRQ_sc_NEWDRIVER_MICROSTEPS = 3,
		MRQ_sc_NEWDRIVER_MICROSTEPS_Q = 4,
		MRQ_sc_NEWDRIVER_STATE = 5,
		MRQ_sc_NEWDRIVER_STATE_Q = 6,

	MRQ_mc_PDM = 76,
		MRQ_sc_PDM_SAMPLESTATE = 0,
		MRQ_sc_PDM_SAMPLESTATE_Q = 1,
		MRQ_sc_PDM_ENCDIV = 2,
		MRQ_sc_PDM_ENCDIV_Q = 3,
		MRQ_sc_PDM_MICSTEPCOUNT_Q = 4,
		MRQ_sc_PDM_MICSTEPDATA_Q = 5,
};
#endif
