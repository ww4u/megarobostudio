#ifndef _MRV_ENUM_H_
#define _MRV_ENUM_H_
enum MRV_LINK_INTFC{
	MRV_LINK_INTFC_NONE,
	MRV_LINK_INTFC_CAN,
	MRV_LINK_INTFC_RS232,
};
enum MRV_LINK_DEVICEINFO{
	MRV_LINK_DEVICEINFO_RESERVE,
	MRV_LINK_DEVICEINFO_MRV,
};
enum MRV_LINK_DEVICEINFO_1{
	MRV_LINK_DEVICEINFO_1_M3604,
	MRV_LINK_DEVICEINFO_1_OTHER,
};
enum MRV_SYSTEM_WORKMODE{
	MRV_SYSTEM_WORKMODE_NORMAL,
	MRV_SYSTEM_WORKMODE_NONE,
};
enum MRV_SYSTEM_POWERON{
	MRV_SYSTEM_POWERON_DEFAULT,
	MRV_SYSTEM_POWERON_LAST,
};
enum MRV_SYSTEM_TYPE{
	MRV_SYSTEM_TYPE_MRQ,
	MRV_SYSTEM_TYPE_MRV,
};
enum MRV_RS232_BAUD{
	MRV_RS232_BAUD__4800,
	MRV_RS232_BAUD__7200,
	MRV_RS232_BAUD__9600,
	MRV_RS232_BAUD__14400,
	MRV_RS232_BAUD__19200,
	MRV_RS232_BAUD__38400,
	MRV_RS232_BAUD__57600,
	MRV_RS232_BAUD__115200,
	MRV_RS232_BAUD__128000,
};
enum MRV_RS232_WORDLEN{
	MRV_RS232_WORDLEN__8,
	MRV_RS232_WORDLEN__9,
};
enum MRV_RS232_FLOWCTL{
	MRV_RS232_FLOWCTL_NONE,
	MRV_RS232_FLOWCTL_RTS,
	MRV_RS232_FLOWCTL_CTS,
	MRV_RS232_FLOWCTL_RTS_CTS,
};
enum MRV_RS232_PARITY{
	MRV_RS232_PARITY_NONE,
	MRV_RS232_PARITY_EVEN,
	MRV_RS232_PARITY_ODD,
};
enum MRV_RS232_STOPBIT{
	MRV_RS232_STOPBIT__1,
	MRV_RS232_STOPBIT__0_5,
	MRV_RS232_STOPBIT__2,
	MRV_RS232_STOPBIT__1_5,
};
enum MRV_CAN_TYPE{
	MRV_CAN_TYPE_A,
	MRV_CAN_TYPE_B,
};
enum MRV_CAN_BAUD{
	MRV_CAN_BAUD__1000,
	MRV_CAN_BAUD__500,
	MRV_CAN_BAUD__250,
	MRV_CAN_BAUD__125,
	MRV_CAN_BAUD__100,
	MRV_CAN_BAUD__50,
	MRV_CAN_BAUD__20,
	MRV_CAN_BAUD__10,
};
enum MRV_CAN_NETMANAGELED{
	MRV_CAN_NETMANAGELED_OFF,
	MRV_CAN_NETMANAGELED_ON,
};
enum MRV_CAN_NETMANAGESTATE{
	MRV_CAN_NETMANAGESTATE_IDLE,
	MRV_CAN_NETMANAGESTATE_HASH,
	MRV_CAN_NETMANAGESTATE_SIGNATURE,
};
enum MRV_MOTION_SWITCH{
	MRV_MOTION_SWITCH_RESET,
	MRV_MOTION_SWITCH_STOP,
	MRV_MOTION_SWITCH_RUN,
};
enum MRV_MOTION_SWITCH_1{
	MRV_MOTION_SWITCH_1_MAIN,
	MRV_MOTION_SWITCH_1_RESSERVE1,
};
enum MRV_MOTION_STATE_1{
	MRV_MOTION_STATE_1_reserve,
	MRV_MOTION_STATE_1_IDLE,
	MRV_MOTION_STATE_1_reserve1,
	MRV_MOTION_STATE_1_CALCEND,
	MRV_MOTION_STATE_1_reserve2,
	MRV_MOTION_STATE_1_RUNNING,
	MRV_MOTION_STATE_1_reserve3,
};
enum MRV_MOTION_STATEREPORT{
	MRV_MOTION_STATEREPORT_ACTIVE,
	MRV_MOTION_STATEREPORT_QUERY,
};
enum MRV_GLOBAL_GROUP{
	MRV_GLOBAL_GROUP_GROUP1,
	MRV_GLOBAL_GROUP_GROUP2,
};
enum MRV_VALVECTRL_DEVICE{
	MRV_VALVECTRL_DEVICE_VALVE,
	MRV_VALVECTRL_DEVICE_MOTOR,
};
enum MRV_VALVECTRL_ACTION{
	MRV_VALVECTRL_ACTION_OFF,
	MRV_VALVECTRL_ACTION_ON,
	MRV_VALVECTRL_ACTION_IDLE,
};
enum MRV_THRESHOLD_HIPRESSUREACTION{
	MRV_THRESHOLD_HIPRESSUREACTION_NONE,
	MRV_THRESHOLD_HIPRESSUREACTION_WARN,
	MRV_THRESHOLD_HIPRESSUREACTION_STOP,
};
enum MRV_PVT_EXECMODE{
	MRV_PVT_EXECMODE_RT,
	MRV_PVT_EXECMODE_NCYCLE,
	MRV_PVT_EXECMODE_FIFO,
};
enum MRV_PVT_HOLD{
	MRV_PVT_HOLD_TRUE,
	MRV_PVT_HOLD_FALSE,
};
enum MRV_CALIBRATION_TYPE{
	MRV_CALIBRATION_TYPE_NONE,
	MRV_CALIBRATION_TYPE_OPEN,
	MRV_CALIBRATION_TYPE_CLOSE,
};
enum MRV_CALIBRATION_SAMPLERATE{
	MRV_CALIBRATION_SAMPLERATE__222KHz,
	MRV_CALIBRATION_SAMPLERATE__176KHz,
	MRV_CALIBRATION_SAMPLERATE__142KHz,
	MRV_CALIBRATION_SAMPLERATE__47KHz,
};
enum MRV_CALIBRATION_DATAUPCTRL{
	MRV_CALIBRATION_DATAUPCTRL_START,
	MRV_CALIBRATION_DATAUPCTRL_STOP,
};
enum MRV_REPORT_STATE{
	MRV_REPORT_STATE_Current,
	MRV_REPORT_STATE_Pressure,
	MRV_REPORT_STATE_Position,
	MRV_REPORT_STATE_Cycle,
};
enum MRV_IOCONFIG_IOFUNCSEL{
	MRV_IOCONFIG_IOFUNCSEL_UART,
	MRV_IOCONFIG_IOFUNCSEL_SWITCH,
};
enum MRV_IOCONFIG_TRIGEDGE{
	MRV_IOCONFIG_TRIGEDGE_NONE,
	MRV_IOCONFIG_TRIGEDGE_RISE,
	MRV_IOCONFIG_TRIGEDGE_FALL,
	MRV_IOCONFIG_TRIGEDGE_BOTH,
};
enum MRV_IOCONFIG_FLOWCTL{
	MRV_IOCONFIG_FLOWCTL_NONE,
	MRV_IOCONFIG_FLOWCTL_RTS,
	MRV_IOCONFIG_FLOWCTL_CTS,
	MRV_IOCONFIG_FLOWCTL_RTS_CTS,
};

const char* MRV_LINK_INTFC_toString( MRV_LINK_INTFC eType );
const char* MRV_LINK_DEVICEINFO_toString( MRV_LINK_DEVICEINFO eType );
const char* MRV_LINK_DEVICEINFO_1_toString( MRV_LINK_DEVICEINFO_1 eType );
const char* MRV_SYSTEM_WORKMODE_toString( MRV_SYSTEM_WORKMODE eType );
const char* MRV_SYSTEM_POWERON_toString( MRV_SYSTEM_POWERON eType );
const char* MRV_SYSTEM_TYPE_toString( MRV_SYSTEM_TYPE eType );
const char* MRV_RS232_BAUD_toString( MRV_RS232_BAUD eType );
const char* MRV_RS232_WORDLEN_toString( MRV_RS232_WORDLEN eType );
const char* MRV_RS232_FLOWCTL_toString( MRV_RS232_FLOWCTL eType );
const char* MRV_RS232_PARITY_toString( MRV_RS232_PARITY eType );
const char* MRV_RS232_STOPBIT_toString( MRV_RS232_STOPBIT eType );
const char* MRV_CAN_TYPE_toString( MRV_CAN_TYPE eType );
const char* MRV_CAN_BAUD_toString( MRV_CAN_BAUD eType );
const char* MRV_CAN_NETMANAGELED_toString( MRV_CAN_NETMANAGELED eType );
const char* MRV_CAN_NETMANAGESTATE_toString( MRV_CAN_NETMANAGESTATE eType );
const char* MRV_MOTION_SWITCH_toString( MRV_MOTION_SWITCH eType );
const char* MRV_MOTION_SWITCH_1_toString( MRV_MOTION_SWITCH_1 eType );
const char* MRV_MOTION_STATE_1_toString( MRV_MOTION_STATE_1 eType );
const char* MRV_MOTION_STATEREPORT_toString( MRV_MOTION_STATEREPORT eType );
const char* MRV_GLOBAL_GROUP_toString( MRV_GLOBAL_GROUP eType );
const char* MRV_VALVECTRL_DEVICE_toString( MRV_VALVECTRL_DEVICE eType );
const char* MRV_VALVECTRL_ACTION_toString( MRV_VALVECTRL_ACTION eType );
const char* MRV_THRESHOLD_HIPRESSUREACTION_toString( MRV_THRESHOLD_HIPRESSUREACTION eType );
const char* MRV_PVT_EXECMODE_toString( MRV_PVT_EXECMODE eType );
const char* MRV_PVT_HOLD_toString( MRV_PVT_HOLD eType );
const char* MRV_CALIBRATION_TYPE_toString( MRV_CALIBRATION_TYPE eType );
const char* MRV_CALIBRATION_SAMPLERATE_toString( MRV_CALIBRATION_SAMPLERATE eType );
const char* MRV_CALIBRATION_DATAUPCTRL_toString( MRV_CALIBRATION_DATAUPCTRL eType );
const char* MRV_REPORT_STATE_toString( MRV_REPORT_STATE eType );
const char* MRV_IOCONFIG_IOFUNCSEL_toString( MRV_IOCONFIG_IOFUNCSEL eType );
const char* MRV_IOCONFIG_TRIGEDGE_toString( MRV_IOCONFIG_TRIGEDGE eType );
const char* MRV_IOCONFIG_FLOWCTL_toString( MRV_IOCONFIG_FLOWCTL eType );

int MRV_LINK_INTFC_toValue( const char *pStr, MRV_LINK_INTFC *pEVal );
int MRV_LINK_DEVICEINFO_toValue( const char *pStr, MRV_LINK_DEVICEINFO *pEVal );
int MRV_LINK_DEVICEINFO_1_toValue( const char *pStr, MRV_LINK_DEVICEINFO_1 *pEVal );
int MRV_SYSTEM_WORKMODE_toValue( const char *pStr, MRV_SYSTEM_WORKMODE *pEVal );
int MRV_SYSTEM_POWERON_toValue( const char *pStr, MRV_SYSTEM_POWERON *pEVal );
int MRV_SYSTEM_TYPE_toValue( const char *pStr, MRV_SYSTEM_TYPE *pEVal );
int MRV_RS232_BAUD_toValue( const char *pStr, MRV_RS232_BAUD *pEVal );
int MRV_RS232_WORDLEN_toValue( const char *pStr, MRV_RS232_WORDLEN *pEVal );
int MRV_RS232_FLOWCTL_toValue( const char *pStr, MRV_RS232_FLOWCTL *pEVal );
int MRV_RS232_PARITY_toValue( const char *pStr, MRV_RS232_PARITY *pEVal );
int MRV_RS232_STOPBIT_toValue( const char *pStr, MRV_RS232_STOPBIT *pEVal );
int MRV_CAN_TYPE_toValue( const char *pStr, MRV_CAN_TYPE *pEVal );
int MRV_CAN_BAUD_toValue( const char *pStr, MRV_CAN_BAUD *pEVal );
int MRV_CAN_NETMANAGELED_toValue( const char *pStr, MRV_CAN_NETMANAGELED *pEVal );
int MRV_CAN_NETMANAGESTATE_toValue( const char *pStr, MRV_CAN_NETMANAGESTATE *pEVal );
int MRV_MOTION_SWITCH_toValue( const char *pStr, MRV_MOTION_SWITCH *pEVal );
int MRV_MOTION_SWITCH_1_toValue( const char *pStr, MRV_MOTION_SWITCH_1 *pEVal );
int MRV_MOTION_STATE_1_toValue( const char *pStr, MRV_MOTION_STATE_1 *pEVal );
int MRV_MOTION_STATEREPORT_toValue( const char *pStr, MRV_MOTION_STATEREPORT *pEVal );
int MRV_GLOBAL_GROUP_toValue( const char *pStr, MRV_GLOBAL_GROUP *pEVal );
int MRV_VALVECTRL_DEVICE_toValue( const char *pStr, MRV_VALVECTRL_DEVICE *pEVal );
int MRV_VALVECTRL_ACTION_toValue( const char *pStr, MRV_VALVECTRL_ACTION *pEVal );
int MRV_THRESHOLD_HIPRESSUREACTION_toValue( const char *pStr, MRV_THRESHOLD_HIPRESSUREACTION *pEVal );
int MRV_PVT_EXECMODE_toValue( const char *pStr, MRV_PVT_EXECMODE *pEVal );
int MRV_PVT_HOLD_toValue( const char *pStr, MRV_PVT_HOLD *pEVal );
int MRV_CALIBRATION_TYPE_toValue( const char *pStr, MRV_CALIBRATION_TYPE *pEVal );
int MRV_CALIBRATION_SAMPLERATE_toValue( const char *pStr, MRV_CALIBRATION_SAMPLERATE *pEVal );
int MRV_CALIBRATION_DATAUPCTRL_toValue( const char *pStr, MRV_CALIBRATION_DATAUPCTRL *pEVal );
int MRV_REPORT_STATE_toValue( const char *pStr, MRV_REPORT_STATE *pEVal );
int MRV_IOCONFIG_IOFUNCSEL_toValue( const char *pStr, MRV_IOCONFIG_IOFUNCSEL *pEVal );
int MRV_IOCONFIG_TRIGEDGE_toValue( const char *pStr, MRV_IOCONFIG_TRIGEDGE *pEVal );
int MRV_IOCONFIG_FLOWCTL_toValue( const char *pStr, MRV_IOCONFIG_FLOWCTL *pEVal );

enum cmd_MRV
{

	MRV_mc_LINK = 1,
		MRV_sc_LINK_INTFC = 0,
		MRV_sc_LINK_INTFC_Q = 1,
		MRV_sc_LINK_DEVICEINFO_Q = 2,

	MRV_mc_SYSTEM = 2,
		MRV_sc_SYSTEM_WORKMODE = 0,
		MRV_sc_SYSTEM_WORKMODE_Q = 1,
		MRV_sc_SYSTEM_POWERON = 2,
		MRV_sc_SYSTEM_POWERON_Q = 3,
		MRV_sc_SYSTEM_SN_Q = 4,
		MRV_sc_SYSTEM_TYPE_Q = 5,
		MRV_sc_SYSTEM_SOFTVER_Q = 6,
		MRV_sc_SYSTEM_HARDVER_Q = 7,
		MRV_sc_SYSTEM_BOOTVER_Q = 8,
		MRV_sc_SYSTEM_ERROR_Q = 9,
		MRV_sc_SYSTEM_WARNCLEAR = 10,

	MRV_mc_RS232 = 3,
		MRV_sc_RS232_BAUD = 0,
		MRV_sc_RS232_BAUD_Q = 1,
		MRV_sc_RS232_WORDLEN = 2,
		MRV_sc_RS232_WORDLEN_Q = 3,
		MRV_sc_RS232_FLOWCTL = 4,
		MRV_sc_RS232_FLOWCTL_Q = 5,
		MRV_sc_RS232_PARITY = 6,
		MRV_sc_RS232_PARITY_Q = 7,
		MRV_sc_RS232_STOPBIT = 8,
		MRV_sc_RS232_STOPBIT_Q = 9,
		MRV_sc_RS232_APPLYPARA = 10,

	MRV_mc_CAN = 4,
		MRV_sc_CAN_TYPE = 0,
		MRV_sc_CAN_TYPE_Q = 1,
		MRV_sc_CAN_BAUD = 2,
		MRV_sc_CAN_BAUD_Q = 3,
		MRV_sc_CAN_GROUP = 4,
		MRV_sc_CAN_GROUP_Q = 5,
		MRV_sc_CAN_SENDID = 6,
		MRV_sc_CAN_SENDID_Q = 7,
		MRV_sc_CAN_RECEIVEID = 8,
		MRV_sc_CAN_RECEIVEID_Q = 9,
		MRV_sc_CAN_GROUPID1 = 10,
		MRV_sc_CAN_GROUPID1_Q = 11,
		MRV_sc_CAN_GROUPID2 = 12,
		MRV_sc_CAN_GROUPID2_Q = 13,
		MRV_sc_CAN_BROADCASTID = 14,
		MRV_sc_CAN_BROADCASTID_Q = 15,
		MRV_sc_CAN_APPLYPARA = 16,
		MRV_sc_CAN_NETMANAGELED = 17,
		MRV_sc_CAN_NETMANAGESTATE = 18,
		MRV_sc_CAN_NETMANAGESTATE_Q = 19,
		MRV_sc_CAN_NETMANAGEID = 20,
		MRV_sc_CAN_NETMANAGEID_Q = 21,
		MRV_sc_CAN_NETMANAGEHASH = 22,
		MRV_sc_CAN_NETMANAGEHASH_Q = 23,
		MRV_sc_CAN_NETMANAGESIGNATURE = 24,
		MRV_sc_CAN_NETMANAGESIGNATURE_Q = 25,

	MRV_mc_MOTION = 21,
		MRV_sc_MOTION_SWITCH = 0,
		MRV_sc_MOTION_STATE_Q = 1,
		MRV_sc_MOTION_STATEREPORT = 2,
		MRV_sc_MOTION_STATEREPORT_Q = 3,

	MRV_mc_GLOBAL = 22,
		MRV_sc_GLOBAL_GROUP = 0,
		MRV_sc_GLOBAL_GROUP_Q = 1,
		MRV_sc_GLOBAL_DISTINGUISH = 2,
		MRV_sc_GLOBAL_DISTINGUISH_Q = 3,

	MRV_mc_VALVECTRL = 51,
		MRV_sc_VALVECTRL_DEVICE = 0,
		MRV_sc_VALVECTRL_DEVICE_Q = 1,
		MRV_sc_VALVECTRL_PWMFREQ = 2,
		MRV_sc_VALVECTRL_PWMFREQ_Q = 3,
		MRV_sc_VALVECTRL_RTDUTY = 4,
		MRV_sc_VALVECTRL_RTDUTY_Q = 5,
		MRV_sc_VALVECTRL_ACTION = 6,
		MRV_sc_VALVECTRL_ACTION_Q = 7,
		MRV_sc_VALVECTRL_IDLEDUTY = 8,
		MRV_sc_VALVECTRL_IDLEDUTY_Q = 9,
		MRV_sc_VALVECTRL_HOLDDUTY = 10,
		MRV_sc_VALVECTRL_HOLDDUTY_Q = 11,
		MRV_sc_VALVECTRL_OPENDUTY = 12,
		MRV_sc_VALVECTRL_OPENDUTY_Q = 13,
		MRV_sc_VALVECTRL_OPENDLYTIME = 14,
		MRV_sc_VALVECTRL_OPENDLYTIME_Q = 15,
		MRV_sc_VALVECTRL_OPENTIME = 16,
		MRV_sc_VALVECTRL_OPENTIME_Q = 17,
		MRV_sc_VALVECTRL_RECORDSTATE = 18,
		MRV_sc_VALVECTRL_RECORDSTATE_Q = 19,
		MRV_sc_VALVECTRL_ONNUMS_Q = 20,
		MRV_sc_VALVECTRL_ONNUMSCLEAR = 21,
		MRV_sc_VALVECTRL_OFFNUMS_Q = 22,
		MRV_sc_VALVECTRL_OFFNUMSCLEAR = 23,
		MRV_sc_VALVECTRL_TIME_Q = 24,
		MRV_sc_VALVECTRL_TIMECLEAR = 25,

	MRV_mc_THRESHOLD = 52,
		MRV_sc_THRESHOLD_HIGHPRESSURE = 0,
		MRV_sc_THRESHOLD_HIGHPRESSURE_Q = 1,
		MRV_sc_THRESHOLD_HIPRESSUREACTION = 2,
		MRV_sc_THRESHOLD_HIPRESSUREACTION_Q = 3,
		MRV_sc_THRESHOLD_LOWPRESSURE = 4,
		MRV_sc_THRESHOLD_LOWPRESSURE_Q = 5,
		MRV_sc_THRESHOLD_LOWPRESSUREACTION = 6,
		MRV_sc_THRESHOLD_LOWPRESSUREACTION_Q = 7,
		MRV_sc_THRESHOLD_HIGHCURRENT = 8,
		MRV_sc_THRESHOLD_HIGHCURRENT_Q = 9,
		MRV_sc_THRESHOLD_HICURRENTACTION = 10,
		MRV_sc_THRESHOLD_HICURRENTACTION_Q = 11,
		MRV_sc_THRESHOLD_LOWCURRENT = 12,
		MRV_sc_THRESHOLD_LOWCURRENT_Q = 13,
		MRV_sc_THRESHOLD_LOWCURRENTACTION = 14,
		MRV_sc_THRESHOLD_LOWCURRENTACTION_Q = 15,
		MRV_sc_THRESHOLD_ONNUMS = 16,
		MRV_sc_THRESHOLD_ONNUMS_Q = 17,
		MRV_sc_THRESHOLD_NUMSACTION = 18,
		MRV_sc_THRESHOLD_NUMSACTION_Q = 19,
		MRV_sc_THRESHOLD_TIME = 20,
		MRV_sc_THRESHOLD_TIME_Q = 21,
		MRV_sc_THRESHOLD_TIMEACTION = 22,
		MRV_sc_THRESHOLD_TIMEACTION_Q = 23,

	MRV_mc_PVT = 53,
		MRV_sc_PVT_EXECMODE = 0,
		MRV_sc_PVT_EXECMODE_Q = 1,
		MRV_sc_PVT_RESET = 2,
		MRV_sc_PVT_CYCLES = 3,
		MRV_sc_PVT_CYCLES_Q = 4,
		MRV_sc_PVT_GRADE = 5,
		MRV_sc_PVT_GRADE_Q = 6,
		MRV_sc_PVT_BUFFERCHECK_Q = 7,
		MRV_sc_PVT_START = 8,
		MRV_sc_PVT_START_Q = 9,
		MRV_sc_PVT_END = 10,
		MRV_sc_PVT_END_Q = 11,
		MRV_sc_PVT_PDATA = 12,
		MRV_sc_PVT_PDATA_Q = 13,
		MRV_sc_PVT_TDATA = 14,
		MRV_sc_PVT_TDATA_Q = 15,
		MRV_sc_PVT_HOLD = 16,
		MRV_sc_PVT_HOLD_Q = 17,
		MRV_sc_PVT_SAVE = 18,
		MRV_sc_PVT_SAVE_Q = 19,

	MRV_mc_CALIBRATION = 54,
		MRV_sc_CALIBRATION_TYPE = 0,
		MRV_sc_CALIBRATION_TYPE_Q = 1,
		MRV_sc_CALIBRATION_SAMPLERATE = 2,
		MRV_sc_CALIBRATION_SAMPLERATE_Q = 3,
		MRV_sc_CALIBRATION_OPENTIME = 4,
		MRV_sc_CALIBRATION_OPENTIME_Q = 5,
		MRV_sc_CALIBRATION_HOLDTIME = 6,
		MRV_sc_CALIBRATION_HOLDTIME_Q = 7,
		MRV_sc_CALIBRATION_CLOSETIME = 8,
		MRV_sc_CALIBRATION_CLOSETIME_Q = 9,
		MRV_sc_CALIBRATION_OPENDUTY = 10,
		MRV_sc_CALIBRATION_OPENDUTY_Q = 11,
		MRV_sc_CALIBRATION_HOLDDUTY = 12,
		MRV_sc_CALIBRATION_HOLDDUTY_Q = 13,
		MRV_sc_CALIBRATION_DATALENGTH_Q = 14,
		MRV_sc_CALIBRATION_DATAUPCTRL = 15,
		MRV_sc_CALIBRATION_DATAUP = 16,

	MRV_mc_REPORT = 55,
		MRV_sc_REPORT_STATE = 0,
		MRV_sc_REPORT_STATE_Q = 1,
		MRV_sc_REPORT_PERIOD = 2,
		MRV_sc_REPORT_PERIOD_Q = 3,
		MRV_sc_REPORT_DATA_Q = 4,

	MRV_mc_IOCONFIG = 56,
		MRV_sc_IOCONFIG_IOFUNCSEL = 0,
		MRV_sc_IOCONFIG_IOFUNCSEL_Q = 1,
		MRV_sc_IOCONFIG_SWFILTERDELAY = 2,
		MRV_sc_IOCONFIG_SWFILTERDELAY_Q = 3,
		MRV_sc_IOCONFIG_SWFILTERCOUNTER = 4,
		MRV_sc_IOCONFIG_SWFILTERCOUNTER_Q = 5,
		MRV_sc_IOCONFIG_TRIGEDGE = 6,
		MRV_sc_IOCONFIG_TRIGEDGE_Q = 7,
		MRV_sc_IOCONFIG_BAUD = 8,
		MRV_sc_IOCONFIG_BAUD_Q = 9,
		MRV_sc_IOCONFIG_WORDLEN = 10,
		MRV_sc_IOCONFIG_WORDLEN_Q = 11,
		MRV_sc_IOCONFIG_FLOWCTL = 12,
		MRV_sc_IOCONFIG_FLOWCTL_Q = 13,
		MRV_sc_IOCONFIG_PARITY = 14,
		MRV_sc_IOCONFIG_PARITY_Q = 15,
		MRV_sc_IOCONFIG_STOPBIT = 16,
		MRV_sc_IOCONFIG_STOPBIT_Q = 17,
		MRV_sc_IOCONFIG_APPLYPARA = 18,
};
#endif
